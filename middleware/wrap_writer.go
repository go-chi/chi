package middleware

// The original work was derived from Goji's middleware, source:
// https://github.com/zenazn/goji/tree/master/web/middleware

import (
	"io"
	"net/http"
)

// NewWrapResponseWriter wraps an http.ResponseWriter, returning a proxy that allows you to
// hook into various parts of the response process.
func NewWrapResponseWriter(w http.ResponseWriter, protoMajor int) WrapResponseWriter {
	cw := &chiWriter{ResponseWriter: w}
	_, hasFlusher := w.(http.Flusher)

	if protoMajor == 2 {
		pusher, hasPusher := w.(http.Pusher)
		if hasFlusher && hasPusher {
			return struct {
				WrapResponseWriter
				http.Flusher
				http.Pusher
			}{
				cw,
				cw,
				pusher,
			}
		}
	} else {
		hijacker, hasHijacker := w.(http.Hijacker)
		_, hasReaderFrom := w.(io.ReaderFrom)
		if hasFlusher && hasHijacker && hasReaderFrom {
			return struct {
				WrapResponseWriter
				http.Flusher
				http.Hijacker
				io.ReaderFrom
			}{
				cw,
				cw,
				hijacker,
				cw,
			}
		}
		if hasFlusher && hasHijacker {
			return struct {
				WrapResponseWriter
				http.Flusher
				http.Hijacker
			}{
				cw,
				cw,
				hijacker,
			}
		}
		if hasHijacker {
			return struct {
				WrapResponseWriter
				http.Hijacker
			}{
				cw,
				hijacker,
			}
		}
	}

	if hasFlusher {
		return struct {
			WrapResponseWriter
			http.Flusher
		}{
			cw,
			cw,
		}
	}

	return struct {
		WrapResponseWriter
	}{
		cw,
	}
}

// WrapResponseWriter is a proxy around an http.ResponseWriter that allows you to hook
// into various parts of the response process.
type WrapResponseWriter interface {
	http.ResponseWriter
	// Status returns the HTTP status of the request, or 0 if one has not
	// yet been sent.
	Status() int
	// BytesWritten returns the total number of bytes sent to the client.
	BytesWritten() int
	// Tee causes the response body to be written to the given io.Writer in
	// addition to proxying the writes through. Only one io.Writer can be
	// tee'd to at once: setting a second one will overwrite the first.
	// Writes will be sent to the proxy before being written to this
	// io.Writer. It is illegal for the tee'd writer to be modified
	// concurrently with writes.
	Tee(io.Writer)
	// Unwrap returns the original proxied target.
	Unwrap() http.ResponseWriter
}

// chiWriter wraps a http.ResponseWriter that implements the minimal
// http.ResponseWriter interface.
type chiWriter struct {
	http.ResponseWriter
	wroteHeader bool
	code        int
	bytes       int
	tee         io.Writer
}

func (cw *chiWriter) WriteHeader(code int) {
	if !cw.wroteHeader {
		cw.code = code
		cw.wroteHeader = true
		cw.ResponseWriter.WriteHeader(code)
	}
}

func (cw *chiWriter) Write(buf []byte) (int, error) {
	cw.maybeWriteHeader()
	n, err := cw.ResponseWriter.Write(buf)
	if cw.tee != nil {
		_, err2 := cw.tee.Write(buf[:n])
		// Prefer errors generated by the proxied writer.
		if err == nil {
			err = err2
		}
	}
	cw.bytes += n
	return n, err
}

func (cw *chiWriter) maybeWriteHeader() {
	if !cw.wroteHeader {
		cw.WriteHeader(http.StatusOK)
	}
}

func (cw *chiWriter) Status() int {
	return cw.code
}

func (cw *chiWriter) BytesWritten() int {
	return cw.bytes
}

func (cw *chiWriter) Tee(w io.Writer) {
	cw.tee = w
}

func (cw *chiWriter) Unwrap() http.ResponseWriter {
	return cw.ResponseWriter
}

func (cw *chiWriter) Flush() {
	cw.wroteHeader = true
	cw.ResponseWriter.(http.Flusher).Flush()
}

func (cw *chiWriter) ReadFrom(r io.Reader) (int64, error) {
	if cw.tee != nil {
		n, err := io.Copy(cw, r)
		cw.bytes += int(n)
		return n, err
	}
	rf := cw.ResponseWriter.(io.ReaderFrom)
	cw.maybeWriteHeader()
	n, err := rf.ReadFrom(r)
	cw.bytes += int(n)
	return n, err
}
